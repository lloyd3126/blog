<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>開發 Laravel 專案時會用到的程式碼比較</title>
    <url>/2022/04/10/%E9%96%8B%E7%99%BC%20Laravel%20%E5%B0%88%E6%A1%88%E6%99%82%E6%9C%83%E7%94%A8%E5%88%B0%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%AF%94%E8%BC%83/</url>
    <content><![CDATA[<h1 id="操作陣列的兩種方法"><a href="#操作陣列的兩種方法" class="headerlink" title="操作陣列的兩種方法"></a>操作陣列的兩種方法</h1><p>在 PHP 中操作 Array 陣列時是使用 array_push 或 array_pop 函式，在 Laravel 中操作陣列時可以使用 push 或 pop 函式。但是使用時要先將 Array 資料型態轉成 Collection 資料型態才能使用。</p>
<p>資料型態：Array </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="variable">$arr3</span> = <span class="title function_ invoke__">array_push</span>(arr1, arr2)</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>資料型態：Collection </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$arr2</span> = [<span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="variable">$arr1</span> = <span class="title function_ invoke__">collect</span>(<span class="variable">$arr1</span>);</span><br><span class="line"><span class="variable">$arr2</span> = <span class="title function_ invoke__">collect</span>(<span class="variable">$arr2</span>);</span><br><span class="line"><span class="variable">$arr3</span> = <span class="variable">$arr1</span> -&gt; <span class="title function_ invoke__">push</span>(<span class="variable">$arr2</span>));</span><br><span class="line"><span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<h1 id="顯示執行結果的兩種方法"><a href="#顯示執行結果的兩種方法" class="headerlink" title="顯示執行結果的兩種方法"></a>顯示執行結果的兩種方法</h1><p>使用 dd 函式，可以在程式中顯示資料，且不會繼續執行後續程式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">dd</span>(<span class="variable">$arr1</span>)</span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="variable">$arr1</span>)</span><br></pre></td></tr></table></figure>

<p>使用 dump 函式，可以在程式中顯示資料，且會繼續執行後續程式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr1</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">dump</span>(<span class="variable">$arr1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Laravel</tag>
        <tag>終端機</tag>
      </tags>
  </entry>
  <entry>
    <title>開發 Laravel 專案時會用到的程式碼</title>
    <url>/2022/04/09/%E9%96%8B%E7%99%BC%20Laravel%20%E5%B0%88%E6%A1%88%E6%99%82%E6%9C%83%E7%94%A8%E5%88%B0%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC/</url>
    <content><![CDATA[<h1 id="新增一般路由"><a href="#新增一般路由" class="headerlink" title="新增一般路由"></a>新增一般路由</h1><ul>
<li>官方文件：<a href="https://laravel.tw/docs/5.2/controllers">連結</a></li>
<li>檔案路徑：.&#x2F;routes&#x2F;web.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user/&#123;id&#125;&#x27;</span>, <span class="string">&#x27;UserController@showProfile&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;profile&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;middleware&#x27;</span> =&gt; <span class="string">&#x27;auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;uses&#x27;</span> =&gt; <span class="string">&#x27;UserController@showProfile&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>

<h1 id="新增資源化路由"><a href="#新增資源化路由" class="headerlink" title="新增資源化路由"></a>新增資源化路由</h1><ul>
<li>官方文件：<a href="https://laravel.tw/docs/5.2/controllers#restful-resource-controllers">連結</a></li>
<li>檔案路徑：.&#x2F;routes&#x2F;web.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;product&#x27;</span>,<span class="string">&#x27;ProductController&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="進階操作路由（群組、前綴和中介層）"><a href="#進階操作路由（群組、前綴和中介層）" class="headerlink" title="進階操作路由（群組、前綴和中介層）"></a>進階操作路由（群組、前綴和中介層）</h1><p>可以使用 group 來設置路由的群組，prefix 來設定路由的前綴，middleware 來設定路由的中介層，namespace 來設定路由的命名空間。使用以下程式設置後，打到 &#x2F;admin&#x2F;index 和 &#x2F;admin&#x2F;print 網址時，就會先經過 checkValidIp 的中介層，再到個別 Controller 的程式中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([</span><br><span class="line">    <span class="string">&#x27;middleware&#x27;</span> =&gt; [<span class="string">&#x27;checkValidIp&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;namespace&#x27;</span> =&gt; <span class="string">&#x27;Admin&#x27;</span>,</span><br><span class="line">],function()&#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/index&#x27;</span>, <span class="string">&#x27;HomeController@index&#x27;</span>);</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/print&#x27;</span>, <span class="string">&#x27;HomeController@print&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="建立顯示商品資訊的-Controller"><a href="#建立顯示商品資訊的-Controller" class="headerlink" title="建立顯示商品資訊的 Controller"></a>建立顯示商品資訊的 Controller</h1><ol>
<li>打開商品資訊的 Controller </li>
<li>建立 getData 函式，裡面放這次範例測試要使用資料。</li>
<li>修改 index 函式，裡面設定取得資料的方式。</li>
<li>透過 $this（這個商品資訊物件）中的 getData 函式取得資料，然後賦值給 $data 變數。</li>
<li>把這個 $data 變數使用 response 函式，包裝成回應格式的資料回傳給使用者。</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Http</span>\<span class="title class_">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getData</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">response</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">collect</span>([</span><br><span class="line">                <span class="title function_ invoke__">collect</span>([</span><br><span class="line">                    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;測試商品 1&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;測試商品的描述&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span> =&gt; <span class="string">&#x27;20&#x27;</span></span><br><span class="line">                ]),</span><br><span class="line">                <span class="title function_ invoke__">collect</span>([</span><br><span class="line">                    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;測試商品 2&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;測試商品的描述&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;price&#x27;</span> =&gt; <span class="string">&#x27;100&#x27;</span></span><br><span class="line">                ])</span><br><span class="line">            ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="取得請求的各種方法"><a href="#取得請求的各種方法" class="headerlink" title="取得請求的各種方法"></a>取得請求的各種方法</h1><ul>
<li>官方文件：<a href="https://laravel.com/docs/5.7/requests">連結</a></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$request</span> <span class="comment">// 使用者的請求物件</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">all</span>() <span class="comment">// 取得所有輸入資料</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">path</span>() <span class="comment">// 取得請求的 URI</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">query</span>() <span class="comment">// 取得請求的查詢參數</span></span><br></pre></td></tr></table></figure>
<p>取得特定輸入值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// 王小明</span></span><br></pre></td></tr></table></figure>

<p>取不到會返回 null</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;age&#x27;</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure>

<p>為要取得的特定輸入值設定預設值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">24</span>) <span class="comment">// 24</span></span><br></pre></td></tr></table></figure>



<h1 id="回應"><a href="#回應" class="headerlink" title="回應"></a>回應</h1><ul>
<li>官方文件：<a href="https://laravel.tw/docs/5.2/responses">連結</a></li>
</ul>
<p>基本回應</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>視圖回應</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>JSON 回應</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">json</span>([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;lloyd&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<h1 id="重新導向"><a href="#重新導向" class="headerlink" title="重新導向"></a>重新導向</h1><ul>
<li>官方文件：<a href="https://laravel.tw/docs/5.2/responses#redirects">連結</a></li>
</ul>
<p>重導回應</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>重導至命名路由</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;login&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>如果你的路由有參數，你可以將參數放進 route 方法的第二個參數：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;profile&#x27;</span>, [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>如果你要重導至路由且路由的參數為 Eloquent 模型的「ID」，你可以直接將模型傳入，ID 將會自動被提取：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;profile&#x27;</span>, [<span class="variable">$user</span>]);</span><br></pre></td></tr></table></figure>


<h1 id="測試改變資料的路由時會產生的錯誤"><a href="#測試改變資料的路由時會產生的錯誤" class="headerlink" title="測試改變資料的路由時會產生的錯誤"></a>測試改變資料的路由時會產生的錯誤</h1><p>新增關於 resource 的路由時會遇到 Bug，需要到 RouteServiceProvider.php 中新增以下程式（三行），這樣就可以讓 Laravel 可以自動處理路由。</p>
<ul>
<li>參考文章：<a href="https://laracasts.com/discuss/channels/laravel/laravel-8-error-target-class-homecontroller-does-not-exist">連結</a></li>
<li>檔案路徑：.&#x2F;Providers&#x2F;RouteServiceProvider.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This namespace is applied to your controller routes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * In addition, it is set as the URL generator&#x27;s root namespace.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$namespace</span> = <span class="string">&#x27;App\Http\Controllers&#x27;</span>; <span class="comment">// ------&gt; 這行是新增的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Define your route model bindings, pattern filters, etc.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">configureRateLimiting</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">routes</span>(function () &#123;</span><br><span class="line">        <span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace) <span class="comment">// ------&gt; 這行是新增的</span></span><br><span class="line">            -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/web.php&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Route</span>::<span class="title function_ invoke__">prefix</span>(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace) <span class="comment">// ------&gt; 這行是新增的</span></span><br><span class="line">            -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/api.php&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>除了要進行上面的操作外，還需要要在 VerifyCsrfToken.php 中設定不要檢查 Csrf Token。</p>
<ul>
<li>檔案路徑：.&#x2F;Http&#x2F;Middleware&#x2F;VerifyCsrfToken.php</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyCsrfToken</span> <span class="keyword">extends</span> <span class="title">Middleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The URIs that should be excluded from CSRF verification.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array&lt;int, string&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$except</span> = [</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Laravel</tag>
        <tag>終端機</tag>
      </tags>
  </entry>
  <entry>
    <title>開發 Laravel 專案時會用到的終端機指令</title>
    <url>/2022/04/08/%E9%96%8B%E7%99%BC%20Laravel%20%E5%B0%88%E6%A1%88%E6%99%82%E6%9C%83%E7%94%A8%E5%88%B0%E7%9A%84%E7%B5%82%E7%AB%AF%E6%A9%9F%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="開啟網路服務"><a href="#開啟網路服務" class="headerlink" title="開啟網路服務"></a>開啟網路服務</h1><p>使用 Larvel 指令庫 (artisan) 中的 serve 指令開啟網路服務</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan serve</span><br></pre></td></tr></table></figure>

<h1 id="開啟路由清單"><a href="#開啟路由清單" class="headerlink" title="開啟路由清單"></a>開啟路由清單</h1><p>使用 Larvel 指令庫 (artisan) 中的 route:list 指令開啟路由清單</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan route:list </span><br></pre></td></tr></table></figure>

<h1 id="建立-Controller"><a href="#建立-Controller" class="headerlink" title="建立 Controller"></a>建立 Controller</h1><p>使用 Larvel 指令庫 (artisan) 中的 make:controller 指令快速建立名為 (ProductController) 的 Controller</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan make:controller ProductController</span><br></pre></td></tr></table></figure>

<h1 id="建立帶有-CRUD-的-Controller"><a href="#建立帶有-CRUD-的-Controller" class="headerlink" title="建立帶有 CRUD 的 Controller"></a>建立帶有 CRUD 的 Controller</h1><p>使用 Larvel 指令庫 (artisan) 中的 make:controller 指令快速建立名為 (ProductController) 並帶有 CRUD 模板 Controller</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php artisan make:controller ProductController --resource</span><br></pre></td></tr></table></figure>

<h1 id="指定抓取更新後的檔案"><a href="#指定抓取更新後的檔案" class="headerlink" title="指定抓取更新後的檔案"></a>指定抓取更新後的檔案</h1><p>有的時候在 Larvel 中新增了檔案後，重啟 Server 會抓不到更新後的檔案，這個時候可以使用 composer dump-autoload 指令，這樣就可以抓到更新後的檔案。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">composer dump-autoload   </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>程式</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>Laravel</tag>
        <tag>終端機</tag>
      </tags>
  </entry>
</search>
